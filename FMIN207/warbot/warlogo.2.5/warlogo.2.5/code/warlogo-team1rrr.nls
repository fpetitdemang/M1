to alist [cles valeur lst]
  let dico[]
  set dico lput cles dico
  set dico lput valeur dico
  
  set lst lput dico lst
end

to-report lookup [cles lst]
  let indice 0
  foreach lst [
   if item 0 ? = cles [report item 1 ?]
   set indice indice + 1
  ]
end

to alistb [cles valeur]
  let dico[]
  set dico lput cles dico
  set dico lput valeur dico
  
  set beliefs lput dico beliefs
end

to-report lookupb [cles]
  let indice 0
  foreach beliefs [
   if item 0 ? = cles [report item 1 ?]
   set indice indice + 1
  ]
end

to setBeliefs [cles valeur]
  let indice 0
  foreach beliefs [
    if item 0 ? = cles [
      set beliefs replace-item 1 beliefs valeur
    ]
    set indice indice + 1
  ]
end


;renvoi les coordonnées polaire de la cible pour le tireur
to-report position-polaire [cible source]
  let xA (item 1 cible) * (cos item 0 cible);r cos teta
  let yA (item 1 cible) * (sin item 0 cible);r sin teta

  let xB (item 1 source) * (cos item 0 source);r cos teta
  let yB (item 1 source) * (sin item 0 source);r sin teta

  let X (abs xA + abs xB)
  let Y (abs yA + abs yB)
  let res-distance sqrt ((X * X) + (Y * Y))
  let res-angle atan  Y X

  let lres []
  set lres lput res-angle lres
  set lres lput res-distance lres
  
  report lres 
     
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; EXPLORER BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to-report explorer-t1-action
 
  report "idle"
end





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ROCKET-LAUNCHER BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to traitement-fils-message-launcher
  

    while [not empty? incoming-queue] [
      let msg get-message
      let performatif get-performative msg 
      let contenu get-content msg
      let emetteur get-sender msg ;; pour récupérer l'émetteur du message..
      let head get-heading-to-sender msg ;; la direction dans laquelle se trouve l'émetteur du message
      let dist get-distance-to-sender msg ;; la distance qui sépare l'émetteur du récepteur du message
                                          ;; faire l'action que l'on désire à partir du performatif du message et son contenu
      
      ;candidat accepte
      if  performatif = "propose"[ ]
        
      ]

    
end

;evite d'entrer en collision avec troupe amis
to-report calcule-trajectoire [destination]
  ;recupere agent le plus proche
  let obstacle  min-one-of percepts with [is-my-friend? self] [distance self]
  if obstacle = nobody or distance obstacle > 8 [report destination]
  
  ;agent trop pres -> calcule la trajectoire a suivre 
  set-heading obstacle  
  let vObstacle get-heading
  set-heading destination
  
  ;calcule vecteur de resultat
  let vRepulsion vecteur-repulsion vObstacle
  ifelse destination < vRepulsion [ report vRepulsion - destination ][report destination - vRepulsion]
  
  
end 

to-report vecteur-repulsion [vObstacle]
  let vRepulsion 0
  if vObstacle > 0 and vObstacle <= 180 [ set vRepulsion abs(180 + vObstacle)]
  if vObstacle > 180 and vObstacle <= 360 [ set vRepulsion abs(vObstacle - 180) ]
  
  report vRepulsion 
end

;lit les msg dans la file
to ecouter-msg-launcher
  let msg 0
  let performative 0
while [not empty? incoming-queue]
  [
   set msg get-message
   set performative get-performative msg
   if performative = "cfp" [reply msg "ack" []] 
   if performative = "accept-proposal" [traitement-proposal-launcher msg stop]
   ;if performative = "reject-proposal" [do-nothing]
   ] 
end

to traitement-proposal-launcher [msg]
  if item 0 get-content msg = "renfort"[
    setBeliefs "cible" item 1 get-content msg
    set ctask "rejoindre-cible"
  ] 
end

to appel-renfort
 broadcast-message get-rocket-launchers "cfp" []
end

to-report rocket-launcher-t1-action
  
  if ctask = "initial-state" [ 
    alistb "chef" nobody
    alistb "cible" nobody
    alistb "pile-afp" []
    alistb "afp" nobody
    ;show lookupb "cible"
    set ctask "explorer-launcher"
  ];definit etat initial
  
  if blocked? [ 
    set-random-heading 
    report "move"]

  report runresult ctask
  
end

to-report rejoindre-cible
  
  ;recupere position cible 
  let A lookupb "cible"
  set A replace-item 1 A (item 1 A - 1)
  
  if item 1 A < 10 [
    set ctask "attaquer-launcher"
    report "idle"
  ]
  

  ;recupere trajectoire a prendre
  set-heading calcule-trajectoire item 0 A
  
    
  ;recupere cible position cible au prochain tour
  let angleB get-heading
  let distanceB item 1 A - 1
  let B []
  set B lput angleB B
  set B lput distanceB B
  
  let ret position-polaire A B
  
  ;maj cible
  setBeliefs "cible" ret
  
  report "move" 
  
end
to-report explorer-launcher
  ecouter-msg-launcher
  
  if lookupb "cible" != nobody [
    set ctask "rejoindre-cible"
    report "idle"]
  
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy? myself] [get-energy self]
  if target != nobody[
    set ctask "attaquer-launcher"
    report "idle"
  ]
  
  set-heading calcule-trajectoire get-heading
  report "move"  
end

to-report attaquer-launcher
  
 let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy? myself] [get-energy self]
 let nbtarget count (percepts with [is-my-enemy? myself])
 let nbami count (percepts with [is-my-friend? myself])
 
 if nbtarget > nbami [appel-renfort]
 
  ;percoit plus ennemi
  ;move
  ;explorer
  if target = nobody [ 
    set ctask "explorer-launcher"
    report "move"
  ]
  
  ;plus de rocket et energie suffisante
  ;build-rocket
  ;attack
  if (get-rocket-number = 0 and get-energy self > rocket-cost) 
  [
    set ctask "attaquer-launcher"
    report "build-rocket"
  ]
  
  ;perçoit enemi et rocket > 0
  ;launch-rocket
  ;attack
  if (get-rocket-number > 0) 
  [
    set ctask "attaquer-launcher"
    report list "launch-rocket" towards target
  ]
  
  report "idle"
  
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; BASE BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;si attquer appeler demande autant de lauch-rocket que d'attaquant
to-report base-t1-action
  while [not empty? incoming-queue] 
    [let msg get-message
      show (sentence "received message: " msg)]
  ifelse energy > 5 * rocket-launcher-cost and energy > 5 * explorer-cost [
    ifelse random 20 > 5 
    [report "build-rocket-launcher"]
    [report "build-explorer"]
  ] [
    ifelse empty-bag? [
      report "idle"
    ] [
      report "eat"
    ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;